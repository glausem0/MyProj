/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyTest.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{              
                
                         
}
PARSER_BEGIN(MyTest)package mytest;

import java.io.*;
import registers.Register;

public class MyTest/*@bgen(jjtree)*/implements MyTestTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMyTestState jjtree = new JJTMyTestState();

/*@egen*/
    public static void main(String args []) throws Exception  {	
    MyTest parser = new MyTest(new FileReader("c:/Users/moi/Documents/GitHub/MyProj/Myproj/src/mytest/test.txt"));	SimpleNode root = parser.prog();

    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println("Prog:");
    Visitors vi = new Visitors();
    root.jjtAccept(vi,null);

    vi.print();

   }}PARSER_END(MyTest)
SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {
  /*CONITIONS*/
  < COND: "eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" >
    
  /* OPERATORS */| < MOV : "mov" >
| < ADD : "add" >
| < SUB : "sub" >
| < RSB : "rsb" >
  /*VAR*/
| < NUMBER : ("#") ([ "0"-"9" ])+ >
| < REGISTER  : ("r") ([ "0"-"9"])+ >}SimpleNode prog():
{/*@bgen(jjtree) prog */
  ASTprog jjtn000 = new ASTprog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prog */
  try {
/*@egen*/
  (instr())* < EOF >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void instr()      :
{}{
  mov()
| add()
| sub()
| rsb()
}

void mov()      :
{}
{
   <MOV>
    (/*@bgen(jjtree) #decl( 2) */
      {
        ASTdecl jjtn001 = new ASTdecl(JJTDECL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," (number() | register()))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/         
    |/*@bgen(jjtree) #declC( 3) */
      {
        ASTdeclC jjtn002 = new ASTdeclC(JJTDECLC);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (cond() register() "," (number() | register()))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
      }
/*@egen*/          
  )
  
}

void add()     :
{}
{
  <ADD>
  (/*@bgen(jjtree) #add( 3) */
    {
      ASTadd jjtn001 = new ASTadd(JJTADD);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (number() | register()) "," (number() | register()))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  3);
      }
    }
/*@egen*/          |/*@bgen(jjtree) #addC( 4) */
    {
      ASTaddC jjtn002 = new ASTaddC(JJTADDC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (number() | register()) "," (number() | register()))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  4);
      }
    }
/*@egen*/           )
}

void sub()     :
{}
{
  <SUB>
  (/*@bgen(jjtree) #sub( 3) */
    {
      ASTsub jjtn001 = new ASTsub(JJTSUB);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (number() | register()) "," (number() | register()))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  3);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) #subC( 4) */
    {
      ASTsubC jjtn002 = new ASTsubC(JJTSUBC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (number() | register()) "," (number() | register()))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  4);
      }
    }
/*@egen*/         
  )
}

void rsb()     :
{}
{
  <RSB>
  (/*@bgen(jjtree) #rsb( 3) */
    {
      ASTrsb jjtn001 = new ASTrsb(JJTRSB);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (number() | register()) "," (number() | register()))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  3);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) #rsbC( 4) */
    {
      ASTrsbC jjtn002 = new ASTrsbC(JJTRSBC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (number() | register()) "," (number() | register()))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  4);
      }
    }
/*@egen*/         
  )
}

void cond():
{/*@bgen(jjtree) cond */
 ASTcond jjtn000 = new ASTcond(JJTCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) cond */
  try {
/*@egen*/
  t = < COND >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void register() :
{/*@bgen(jjtree) register */
 ASTregister jjtn000 = new ASTregister(JJTREGISTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) register */
  try {
/*@egen*/
  t= < REGISTER >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.data.put("reg", t.image.toString()); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void number():
{/*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) number */
  try {
/*@egen*/
  t= < NUMBER >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.data.put("value", t.image.toString()); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}