/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{ multi = true;
 VISITOR = true;
 NODE_EXTENDS="dataNode";
}
PARSER_BEGIN(MyTest)package mytest;

import java.io.*;
import registers.Register;

public class MyTest{
    public static void main(String args []) throws Exception  {	
    MyTest parser = new MyTest(new FileReader("c:/Users/moi/Documents/GitHub/MyProj/Myproj/src/mytest/test.txt"));	SimpleNode root = parser.prog();

    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println("Prog:");
    Visitors vi = new Visitors();
    root.jjtAccept(vi,null);

    vi.print();

   }}PARSER_END(MyTest)
SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {
  /*CONITIONS*/
  < COND: "eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" >
    
  /* OPERATORS */| < MOV : "mov" >
| < ADD : "add" >
| < SUB : "sub" >
| < RSB : "rsb" >
  /*VAR*/
| < NUMBER : ("#") ([ "0"-"9" ])+ >
| < REGISTER  : ("r") ([ "0"-"9"])+ >}SimpleNode prog():
{}
{
  (instr())* < EOF > { return jjtThis;}}

void instr() #void:
{}{
  mov()
| add()
| sub()
| rsb()
}

void mov() #void:
{}
{
   <MOV>
    (
      (register() "," (number() | register())) #decl(2)
    | (cond() register() "," (number() | register())) #declC(3)
  )
  
}

void add()#void:
{}
{
  <ADD>
  (
    (register() "," (number() | register()) "," (number() | register())) #add(3)  | (cond() register() "," (number() | register()) "," (number() | register())) #addC(4)  )
}

void sub()#void:
{}
{
  <SUB>
  (
    (register() "," (number() | register()) "," (number() | register())) #sub(3)
  | (cond() register() "," (number() | register()) "," (number() | register())) #subC(4)
  )
}

void rsb()#void:
{}
{
  <RSB>
  (
    (register() "," (number() | register()) "," (number() | register())) #rsb(3)
  | (cond() register() "," (number() | register()) "," (number() | register())) #rsbC(4)
  )
}

void cond():
{Token t;}
{
  t = < COND > { jjtThis.value = t.image; }
}

void register() :
{Token t;}
{
  t= < REGISTER > { jjtThis.data.put("reg", t.image.toString()); }
}

void number():
{Token t;}
{
  t= < NUMBER > { jjtThis.data.put("value", t.image.toString()); }
}