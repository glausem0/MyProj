/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{ multi = true;
 //LOOKAHEAD = 3;
 VISITOR = true;
 NODE_EXTENDS="dataNode";

}
PARSER_BEGIN(MyTest)package compAndInt;

import java.io.*;
import registers.Register;

public class MyTest{
    public static void main(String args []) throws Exception  {	
    MyTest parser = new MyTest(new FileReader("c:/Users/moi/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));	SimpleNode root = parser.prog();

    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println("Prog:");
    Visitors vi = new Visitors();
    root.jjtAccept(vi,null);

    vi.print();

   }}PARSER_END(MyTest)
SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {
  /*CONITIONS*/
  < COND: "eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" >
| < SCND: "s" >


  /*SHIFT*/
| < LSL: "lsl" >
| < LSR: "lsr" >
| < SHIFT: "<<" > 

  /* OPERATORS */| < MOV : "mov" >
| < MVN : "mvn" >
| < ADD : "add" >
| < ADC : "adc" >
| < SUB : "sub" >
| < SBC : "sbc" >
| < RSB : "rsb" >
| < RSC : "rsc" >
| < CMP : "cmp" >
| < CMN : "cmn" >

  /*VAR*/
| < NUMBER : ("#") ([ "0"-"9" ])+ >
| < REGISTER  : ("r") ([ "0"-"9"])+ >
| < HEXA : ("#0x") (["0"-"9","a"-"f"])+ >}SimpleNode prog():
{}
{
  (instr())* < EOF > { return jjtThis;}}

void instr() #void:
{}{
  mov()
| mvn()
| add()
| adc()
| sub()
| sbc()
| rsb()
| rsc()
| cmp()
| cmn()
}

void mov() #void:
{}
{
   <MOV>
   (
    (
      (register() "," ( number() | reg_shift() )) #decl(2)
    | (scnd() register() "," (number() | register() | lsl() | lsr())) #declS(3)
    )
   |cond() 
    (
      (register() "," (number() | register())) #declC(3)
    | (scnd() register() "," (number() | register())) #declCS(4)
    )
   )
}

void reg_shift() #void:
{}
{
  LOOKAHEAD(2)  (register() "," (lsl() (number() | register()) | lsr() (number() | register())) ) #shiftLS(3)
| (register())
}

void mvn() #void:
{}
{
   <MVN>
   (
    (
      (register() "," (number() | register())) #decln(2)
    | (scnd() register() "," (number() | register())) #declnS(3)
    )
   |cond() 
    (
      (register() "," (number() | register())) #declnC(3)
    | (scnd() register() "," (number() | register())) #declnCS(4)
    )
   )
}

void add()#void:
{}
{
  <ADD>
  (
    (      (register() "," (number() | register()) "," (number() | register())) #add(3)
    | (scnd() register() "," (number() | register()) "," (number() | register())) #addS(4)
    )

  | cond()
    (     (register() "," (number() | register()) "," (number() | register())) #addC(4)
   | (scnd() register() "," (number() | register()) "," (number() | register())) #addCS(5)       )
   )
}

void adc()#void:
{}
{
  <ADC>
  (
    (
      (register() "," (number() | register()) "," (number() | register())) #adc(3)
    | (scnd() register() "," (number() | register()) "," (number() | register())) #adcS(4)
    )

  | cond()
    (
     (register() "," (number() | register()) "," (number() | register())) #adcC(4)
   | (scnd() register() "," (number() | register()) "," (number() | register())) #adcCS(5)  
     )
   )
}

void sub()#void:
{}
{
  <SUB>
  (
    (
      (register() "," (number() | register()) "," (number() | register())) #sub(3)
    | (scnd() register() "," (number() | register()) "," (number() | register())) #subS(4)
    )

  | cond()
    (
     (register() "," (number() | register()) "," (number() | register())) #subC(4)
   | (scnd() register() "," (number() | register()) "," (number() | register())) #subCS(5)  
     )
   )
}

void sbc()#void:
{}
{
  <SBC>
  (
    (
      (register() "," (number() | register()) "," (number() | register())) #sbc(3)
    | (scnd() register() "," (number() | register()) "," (number() | register())) #sbcS(4)
    )

  | cond()
    (
     (register() "," (number() | register()) "," (number() | register())) #sbcC(4)
   | (scnd() register() "," (number() | register()) "," (number() | register())) #sbcCS(5)  
     )
   )
}

void rsb()#void:
{}
{
  <RSB>
  (
    (
      (register() "," (number() | register()) "," (number() | register())) #rsb(3)
    | (scnd() register() "," (number() | register()) "," (number() | register())) #rsbS(4)
    )

  | cond()
    (
     (register() "," (number() | register()) "," (number() | register())) #rsbC(4)
   | (scnd() register() "," (number() | register()) "," (number() | register())) #rsbCS(5)  
     )
   )
}

void rsc()#void:
{}
{
  <RSC>
  (
    (
      (register() "," (number() | register()) "," (number() | register())) #rsc(3)
    | (scnd() register() "," (number() | register()) "," (number() | register())) #rscS(4)
    )

  | cond()
    (
     (register() "," (number() | register()) "," (number() | register())) #rscC(4)
   | (scnd() register() "," (number() | register()) "," (number() | register())) #rscCS(5)  
     )
   )
}

void cmp()#void:
{}
{
  <CMP>
  (
    (register() "," (number() | register())) #cmp(2)
  | (cond() register() "," (number() | register())) #cmpC(3)  )
}

void cmn()#void:
{}
{
  <CMN>
  (
    (register() "," (number() | register())) #cmn(2)
  | (cond() register() "," (number() | register())) #cmnC(3)
  )
}

/*Cond, scond, lsl, lsr, registres, number, hexa*/
void cond():
{Token t;}
{
  t = < COND > { jjtThis.value = t.image; }
}

void scnd():
{Token t;}
{
  t = < SCND > { jjtThis.value = t.image; }
}

void lsl():
{Token t;}
{
  t= < LSL >  { jjtThis.value = t.image.toString(); }
}

void lsr():
{Token t;}
{
  t= < LSR >  { jjtThis.value = t.image.toString(); }
}

void register() :
{Token t;}
{
  t= < REGISTER > { jjtThis.data.put("reg", t.image.toString()); }
}

void number():
{Token t;}
{
  t= < NUMBER > { jjtThis.data.put("value", t.image.toString()); }
}

void hexa():
{Token t;}
{
 t = < HEXA > { jjtThis.data.put("hexa", t.image.toString()); }
}
