/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyTest.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{              
                 
                
                         

}
PARSER_BEGIN(MyTest)package compAndInt;

import java.io.*;
import registers.Register;

public class MyTest/*@bgen(jjtree)*/implements MyTestTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMyTestState jjtree = new JJTMyTestState();

/*@egen*/
    public static void main(String args []) throws Exception  {	
    MyTest parser = new MyTest(new FileReader("c:/Users/moi/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));
    //MyTest parser = new MyTest(new FileReader("c:/Users/M\u00e9lanie/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));	SimpleNode root = parser.prog();

    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println("Prog:");
    Visitors vi = new Visitors();
    root.jjtAccept(vi,null);

    vi.print();

   }}PARSER_END(MyTest)
SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {
  /*CONITIONS*/
  < COND: "eq" | "ne" | "cs" | "hs" | "cc" | "lo" | "mi" | "pl" | "vs" | "vc" | "hi" | "ls" | "ge" | "lt" | "gt" | "le" >
| < SCND: "s" >

  /*SHIFT*/
| < LSL: "lsl" >
| < LSR: "lsr" >
| < SHIFT: "<<" | ">>" > 

  /* ARITHMETIQUE*/| < MOV : "mov" >
| < MVN : "mvn" >
| < ADD : "add" >
| < ADC : "adc" >
| < SUB : "sub" >
| < SBC : "sbc" >
| < RSB : "rsb" >
| < RSC : "rsc" >

  /*COMPARISON*/
| < CMP : "cmp" >
| < CMN : "cmn" >
| < TEQ : "teq" >
| < TST : "tst" >

  /*LOGIC*/
| < AND : "and" >
| < BIC : "bic" >
| < EOR : "eor" >
| < ORR : "orr" >
  /*LDR/STR*/
| < LDR : "ldr" >

  /*VAR*/
| < NUMBER : ("#") ("-") ([ "0"-"9" ])+ | ("#") ([ "0"-"9" ])+  >
| < REGISTER  : ("r") ([ "0"-"9"])+ >
| < HEXA : ("#0x") (["0"-"9","a"-"f"])+ >
| < NUM : ([ "0"-"9" ])+ >}SimpleNode prog():
{/*@bgen(jjtree) prog */
  ASTprog jjtn000 = new ASTprog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prog */
  try {
/*@egen*/
  (instr())* < EOF >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void instr()      :
{}{
  mov()
| mvn()
| add()
| adc()
| sub()
| sbc()
| rsb()
| rsc()

| cmp()
| cmn()
| teq()
| tst()

| and()
| bic()
| eor()
| orr()

| ldr()
}

void mov()      :
{}
{
   <MOV>
   (
    (/*@bgen(jjtree) #decl( 2) */
      {
        ASTdecl jjtn001 = new ASTdecl(JJTDECL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," ( hexa()| numOrNumShift() | regOrRegShift()))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/         
    |/*@bgen(jjtree) #declS( 3) */
      {
        ASTdeclS jjtn002 = new ASTdeclS(JJTDECLS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," ( hexa()| numOrNumShift() | regOrRegShift()))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
      }
/*@egen*/          
    )
   |cond() 
    (/*@bgen(jjtree) #declC( 3) */
      {
        ASTdeclC jjtn003 = new ASTdeclC(JJTDECLC);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/
      (register() "," ( hexa()| numOrNumShift() | regOrRegShift()))/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  3);
        }
      }
/*@egen*/          
    |/*@bgen(jjtree) #declCS( 4) */
      {
        ASTdeclCS jjtn004 = new ASTdeclCS(JJTDECLCS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ (scnd() register() "," ( hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  4);
        }
      }
/*@egen*/           
    )
   )
}

void mvn()      :
{}
{
   <MVN>
   (
    (/*@bgen(jjtree) #decln( 2) */
      {
        ASTdecln jjtn001 = new ASTdecln(JJTDECLN);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," ( hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
      }
/*@egen*/          
    |/*@bgen(jjtree) #declnS( 3) */
      {
        ASTdeclnS jjtn002 = new ASTdeclnS(JJTDECLNS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," ( hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
      }
/*@egen*/           
    )
   |cond() 
    (/*@bgen(jjtree) #declnC( 3) */
      {
        ASTdeclnC jjtn003 = new ASTdeclnC(JJTDECLNC);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/
      (register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  3);
        }
      }
/*@egen*/           
    |/*@bgen(jjtree) #declnCS( 4) */
      {
        ASTdeclnCS jjtn004 = new ASTdeclnCS(JJTDECLNCS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ (scnd() register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  4);
        }
      }
/*@egen*/            
    )
   )
}

void add()     :
{}
{
  <ADD>
  (
    (/*@bgen(jjtree) #add( 3) */
      {
        ASTadd jjtn001 = new ASTadd(JJTADD);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #addS( 4) */
      {
        ASTaddS jjtn002 = new ASTaddS(JJTADDS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #addC( 4) */
     {
       ASTaddC jjtn003 = new ASTaddC(JJTADDC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #addCS( 5) */
     {
       ASTaddCS jjtn004 = new ASTaddCS(JJTADDCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/                 )
   )
}

void adc()     :
{}
{
  <ADC>
  (
    (/*@bgen(jjtree) #adc( 3) */
      {
        ASTadc jjtn001 = new ASTadc(JJTADC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #adcS( 4) */
      {
        ASTadcS jjtn002 = new ASTadcS(JJTADCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #adcC( 4) */
     {
       ASTadcC jjtn003 = new ASTadcC(JJTADCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #adcCS( 5) */
     {
       ASTadcCS jjtn004 = new ASTadcCS(JJTADCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void sub()     :
{}
{
  <SUB>
  (
    (/*@bgen(jjtree) #sub( 3) */
      {
        ASTsub jjtn001 = new ASTsub(JJTSUB);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #subS( 4) */
      {
        ASTsubS jjtn002 = new ASTsubS(JJTSUBS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #subC( 4) */
     {
       ASTsubC jjtn003 = new ASTsubC(JJTSUBC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #subCS( 5) */
     {
       ASTsubCS jjtn004 = new ASTsubCS(JJTSUBCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void sbc()     :
{}
{
  <SBC>
  (
    (/*@bgen(jjtree) #sbc( 3) */
      {
        ASTsbc jjtn001 = new ASTsbc(JJTSBC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #sbcS( 4) */
      {
        ASTsbcS jjtn002 = new ASTsbcS(JJTSBCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #sbcC( 4) */
     {
       ASTsbcC jjtn003 = new ASTsbcC(JJTSBCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #sbcCS( 5) */
     {
       ASTsbcCS jjtn004 = new ASTsbcCS(JJTSBCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void rsb()     :
{}
{
  <RSB>
  (
    (/*@bgen(jjtree) #rsb( 3) */
      {
        ASTrsb jjtn001 = new ASTrsb(JJTRSB);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #rsbS( 4) */
      {
        ASTrsbS jjtn002 = new ASTrsbS(JJTRSBS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #rsbC( 4) */
     {
       ASTrsbC jjtn003 = new ASTrsbC(JJTRSBC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #rsbCS( 5) */
     {
       ASTrsbCS jjtn004 = new ASTrsbCS(JJTRSBCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void rsc()     :
{}
{
  <RSC>
  (
    (/*@bgen(jjtree) #rsc( 3) */
      {
        ASTrsc jjtn001 = new ASTrsc(JJTRSC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #rscS( 4) */
      {
        ASTrscS jjtn002 = new ASTrscS(JJTRSCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #rscC( 4) */
     {
       ASTrscC jjtn003 = new ASTrscC(JJTRSCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #rscCS( 5) */
     {
       ASTrscCS jjtn004 = new ASTrscCS(JJTRSCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void cmp()     :
{}
{
  <CMP>
  (/*@bgen(jjtree) #cmp( 2) */
    {
      ASTcmp jjtn001 = new ASTcmp(JJTCMP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) #cmpC( 3) */
    {
      ASTcmpC jjtn002 = new ASTcmpC(JJTCMPC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
    }
/*@egen*/           )
}

void cmn()     :
{}
{
  <CMN>
  (/*@bgen(jjtree) #cmn( 2) */
    {
      ASTcmn jjtn001 = new ASTcmn(JJTCMN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) #cmnC( 3) */
    {
      ASTcmnC jjtn002 = new ASTcmnC(JJTCMNC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
    }
/*@egen*/         
  )
}

void teq()     :
{}
{
  <TEQ>
  (/*@bgen(jjtree) #teq( 2) */
    {
      ASTteq jjtn001 = new ASTteq(JJTTEQ);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) #teqC( 3) */
    {
      ASTteqC jjtn002 = new ASTteqC(JJTTEQC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
    }
/*@egen*/         
  )
}

void tst()     :
{}
{
  <TST>
  (/*@bgen(jjtree) #tst( 2) */
    {
      ASTtst jjtn001 = new ASTtst(JJTTST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/        
  |/*@bgen(jjtree) #tstC( 3) */
    {
      ASTtstC jjtn002 = new ASTtstC(JJTTSTC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ (cond() register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
    }
/*@egen*/         
  )
}

void and()      :
{}
{
  <AND>
  (
    (/*@bgen(jjtree) #and( 3) */
      {
        ASTand jjtn001 = new ASTand(JJTAND);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #andS( 4) */
      {
        ASTandS jjtn002 = new ASTandS(JJTANDS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #andC( 4) */
     {
       ASTandC jjtn003 = new ASTandC(JJTANDC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #andCS( 5) */
     {
       ASTandCS jjtn004 = new ASTandCS(JJTANDCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void bic()      :
{}
{
  <BIC>
  (
    (/*@bgen(jjtree) #bic( 3) */
      {
        ASTbic jjtn001 = new ASTbic(JJTBIC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #bicS( 4) */
      {
        ASTbicS jjtn002 = new ASTbicS(JJTBICS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #bicC( 4) */
     {
       ASTbicC jjtn003 = new ASTbicC(JJTBICC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #bicCS( 5) */
     {
       ASTbicCS jjtn004 = new ASTbicCS(JJTBICCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void eor()      :
{}
{
  <EOR>
  (
    (/*@bgen(jjtree) #eor( 3) */
      {
        ASTeor jjtn001 = new ASTeor(JJTEOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #eorS( 4) */
      {
        ASTeorS jjtn002 = new ASTeorS(JJTEORS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #eorC( 4) */
     {
       ASTeorC jjtn003 = new ASTeorC(JJTEORC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #eorCS( 5) */
     {
       ASTeorCS jjtn004 = new ASTeorCS(JJTEORCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void orr()      :
{}
{
  <ORR>
  (
    (/*@bgen(jjtree) #orr( 3) */
      {
        ASTorr jjtn001 = new ASTorr(JJTORR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
      }
/*@egen*/        
    |/*@bgen(jjtree) #orrS( 4) */
      {
        ASTorrS jjtn002 = new ASTorrS(JJTORRS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
      }
/*@egen*/         
    )

  | cond()
    (/*@bgen(jjtree) #orrC( 4) */
     {
       ASTorrC jjtn003 = new ASTorrC(JJTORRC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/
     (register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) #orrCS( 5) */
     {
       ASTorrCS jjtn004 = new ASTorrCS(JJTORRCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ (scnd() register() "," register() "," (hexa()| numOrNumShift() | regOrRegShift() ))/*@bgen(jjtree)*/
     } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         throw (RuntimeException)jjte004;
       }
       if (jjte004 instanceof ParseException) {
         throw (ParseException)jjte004;
       }
       throw (Error)jjte004;
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
     }
/*@egen*/            
     )
   )
}

void ldr()      :
{}
{
  < LDR > "[" register()
  (
   ","
   ( 
    ( "-" register() (shiftCOrShiftCAUp()| closeOrCAUp()) )
  | ( register() (shiftCOrShiftCAUp()| closeOrCAUp()))
  | ( number() closeOrCAUp())
   )
| ( 
 LOOKAHEAD(2)  
  "]" ","
   (
    ( LOOKAHEAD(3) ("-" register() "," (num_shift() | reg_shift()) ) |("-" register()) )
  | ( LOOKAHEAD(2) (register() "," (num_shift() | reg_shift()) ) | (register()) )
  | ( number() )
   )
 | closeOrCAUp()
  )  )
}

void shiftCOrShiftCAUp()        :
{}
{
  "," (num_shift() | reg_shift()) closeOrCAUp()    
}

void closeOrCAUp()      :
{}
{
  LOOKAHEAD(2)
  ("]" "!")
| ("]")
}

void regOrRegShift()      :
{}
{
  LOOKAHEAD(2)
  (reg_shift())
| (register())
}

void numOrNumShift()      :
{}
{
  LOOKAHEAD(2)
  (num_shift())
| (number())
}

void reg_shift()      :
{}
{/*@bgen(jjtree) #shiftLS( 3) */
 {
   ASTshiftLS jjtn001 = new ASTshiftLS(JJTSHIFTLS);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (register() "," (lsl() (number() | register()) | lsr() (number() | register())) )/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  3);
   }
 }
/*@egen*/            
}

void num_shift()      :
{}
{/*@bgen(jjtree) #shiftF( 3) */
 {
   ASTshiftF jjtn001 = new ASTshiftF(JJTSHIFTF);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (number() shift() num())/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  3);
   }
 }
/*@egen*/           
}


/*Cond, scond, lsl, lsr, registres, number, hexa*/
void cond():
{/*@bgen(jjtree) cond */
 ASTcond jjtn000 = new ASTcond(JJTCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) cond */
  try {
/*@egen*/
  t = < COND >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void scnd():
{/*@bgen(jjtree) scnd */
 ASTscnd jjtn000 = new ASTscnd(JJTSCND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) scnd */
  try {
/*@egen*/
  t = < SCND >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lsl():
{/*@bgen(jjtree) lsl */
 ASTlsl jjtn000 = new ASTlsl(JJTLSL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) lsl */
  try {
/*@egen*/
  t= < LSL >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.value = t.image.toString(); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lsr():
{/*@bgen(jjtree) lsr */
 ASTlsr jjtn000 = new ASTlsr(JJTLSR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) lsr */
  try {
/*@egen*/
  t= < LSR >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.value = t.image.toString(); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void shift():
{/*@bgen(jjtree) shift */
 ASTshift jjtn000 = new ASTshift(JJTSHIFT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) shift */
  try {
/*@egen*/
  t = < SHIFT >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.value = t.image.toString(); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void register() :
{/*@bgen(jjtree) register */
 ASTregister jjtn000 = new ASTregister(JJTREGISTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) register */
  try {
/*@egen*/
  t= < REGISTER >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.data.put("reg", t.image.toString()); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void number():
{/*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) number */
  try {
/*@egen*/
  t= < NUMBER >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.data.put("value", t.image.toString()); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void hexa():
{/*@bgen(jjtree) hexa */
 ASThexa jjtn000 = new ASThexa(JJTHEXA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) hexa */
 try {
/*@egen*/
 t = < HEXA >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.data.put("hexa", t.image.toString()); }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void num():
{/*@bgen(jjtree) num */
 ASTnum jjtn000 = new ASTnum(JJTNUM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) num */
 try {
/*@egen*/
 t = < NUM >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.data.put("num", t.image.toString()); }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
