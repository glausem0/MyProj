/* Generated By:JJTree&JavaCC: Do not edit this line. MyTest.java */
package compAndInt;

import java.io.*;
import registers.Register;

public class MyTest/*@bgen(jjtree)*/implements MyTestTreeConstants, MyTestConstants {/*@bgen(jjtree)*/
  protected static JJTMyTestState jjtree = new JJTMyTestState();
  public static void main(String args []) throws Exception
  {
    MyTest parser = new MyTest(new FileReader("c:/Users/moi/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));
    //MyTest parser = new MyTest(new FileReader("c:/Users/Mélanie/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));        SimpleNode root = parser.prog();

    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println("Prog:");
    Visitors vi = new Visitors();
    root.jjtAccept(vi,null);

    vi.print();

   }

  static final public SimpleNode prog() throws ParseException {
 /*@bgen(jjtree) prog */
  ASTprog jjtn000 = new ASTprog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOV:
        case MVN:
        case ADD:
        case ADC:
        case SUB:
        case SBC:
        case RSB:
        case RSC:
        case CMP:
        case CMN:
        case TEQ:
        case TST:
        case AND:
        case BIC:
        case EOR:
        case ORR:
        case LDR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        instr();
      }
      jj_consume_token(0);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void instr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOV:
      mov();
      break;
    case MVN:
      mvn();
      break;
    case ADD:
      add();
      break;
    case ADC:
      adc();
      break;
    case SUB:
      sub();
      break;
    case SBC:
      sbc();
      break;
    case RSB:
      rsb();
      break;
    case RSC:
      rsc();
      break;
    case CMP:
      cmp();
      break;
    case CMN:
      cmn();
      break;
    case TEQ:
      teq();
      break;
    case TST:
      tst();
      break;
    case AND:
      and();
      break;
    case BIC:
      bic();
      break;
    case EOR:
      eor();
      break;
    case ORR:
      orr();
      break;
    case LDR:
      ldr();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mov() throws ParseException {
    jj_consume_token(MOV);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdecl jjtn001 = new ASTdecl(JJTDECL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
        }
        break;
      case SCND:
        ASTdeclS jjtn002 = new ASTdeclS(JJTDECLS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdeclC jjtn003 = new ASTdeclC(JJTDECLC);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  3);
        }
        }
        break;
      case SCND:
        ASTdeclCS jjtn004 = new ASTdeclCS(JJTDECLCS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  4);
        }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mvn() throws ParseException {
    jj_consume_token(MVN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdecln jjtn001 = new ASTdecln(JJTDECLN);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
        }
        break;
      case SCND:
        ASTdeclnS jjtn002 = new ASTdeclnS(JJTDECLNS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdeclnC jjtn003 = new ASTdeclnC(JJTDECLNC);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  3);
        }
        }
        break;
      case SCND:
        ASTdeclnCS jjtn004 = new ASTdeclnCS(JJTDECLNCS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  4);
        }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void add() throws ParseException {
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTadd jjtn001 = new ASTadd(JJTADD);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTaddS jjtn002 = new ASTaddS(JJTADDS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTaddC jjtn003 = new ASTaddC(JJTADDC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTaddCS jjtn004 = new ASTaddCS(JJTADDCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void adc() throws ParseException {
    jj_consume_token(ADC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTadc jjtn001 = new ASTadc(JJTADC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTadcS jjtn002 = new ASTadcS(JJTADCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTadcC jjtn003 = new ASTadcC(JJTADCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTadcCS jjtn004 = new ASTadcCS(JJTADCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sub() throws ParseException {
    jj_consume_token(SUB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTsub jjtn001 = new ASTsub(JJTSUB);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTsubS jjtn002 = new ASTsubS(JJTSUBS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTsubC jjtn003 = new ASTsubC(JJTSUBC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTsubCS jjtn004 = new ASTsubCS(JJTSUBCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sbc() throws ParseException {
    jj_consume_token(SBC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTsbc jjtn001 = new ASTsbc(JJTSBC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTsbcS jjtn002 = new ASTsbcS(JJTSBCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTsbcC jjtn003 = new ASTsbcC(JJTSBCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[40] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTsbcCS jjtn004 = new ASTsbcCS(JJTSBCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void rsb() throws ParseException {
    jj_consume_token(RSB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTrsb jjtn001 = new ASTrsb(JJTRSB);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTrsbS jjtn002 = new ASTrsbS(JJTRSBS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTrsbC jjtn003 = new ASTrsbC(JJTRSBC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTrsbCS jjtn004 = new ASTrsbCS(JJTRSBCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void rsc() throws ParseException {
    jj_consume_token(RSC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTrsc jjtn001 = new ASTrsc(JJTRSC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTrscS jjtn002 = new ASTrscS(JJTRSCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTrscC jjtn003 = new ASTrscC(JJTRSCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTrscCS jjtn004 = new ASTrscCS(JJTRSCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cmp() throws ParseException {
    jj_consume_token(CMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTcmp jjtn001 = new ASTcmp(JJTCMP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTcmpC jjtn002 = new ASTcmpC(JJTCMPC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cmn() throws ParseException {
    jj_consume_token(CMN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTcmn jjtn001 = new ASTcmn(JJTCMN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTcmnC jjtn002 = new ASTcmnC(JJTCMNC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void teq() throws ParseException {
    jj_consume_token(TEQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTteq jjtn001 = new ASTteq(JJTTEQ);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTteqC jjtn002 = new ASTteqC(JJTTEQC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void tst() throws ParseException {
    jj_consume_token(TST);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTtst jjtn001 = new ASTtst(JJTTST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTtstC jjtn002 = new ASTtstC(JJTTSTC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void and() throws ParseException {
    jj_consume_token(AND);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTand jjtn001 = new ASTand(JJTAND);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[70] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTandS jjtn002 = new ASTandS(JJTANDS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTandC jjtn003 = new ASTandC(JJTANDC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTandCS jjtn004 = new ASTandCS(JJTANDCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bic() throws ParseException {
    jj_consume_token(BIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTbic jjtn001 = new ASTbic(JJTBIC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTbicS jjtn002 = new ASTbicS(JJTBICS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTbicC jjtn003 = new ASTbicC(JJTBICC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTbicCS jjtn004 = new ASTbicCS(JJTBICCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[81] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void eor() throws ParseException {
    jj_consume_token(EOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTeor jjtn001 = new ASTeor(JJTEOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTeorS jjtn002 = new ASTeorS(JJTEORS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTeorC jjtn003 = new ASTeorC(JJTEORC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTeorCS jjtn004 = new ASTeorCS(JJTEORCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[88] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void orr() throws ParseException {
    jj_consume_token(ORR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTorr jjtn001 = new ASTorr(JJTORR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[91] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTorrS jjtn002 = new ASTorrS(JJTORRS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTorrC jjtn003 = new ASTorrC(JJTORRC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[94] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTorrCS jjtn004 = new ASTorrCS(JJTORRCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(31);
          register();
          jj_consume_token(31);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[95] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ldr() throws ParseException {
    jj_consume_token(LDR);
    jj_consume_token(32);
    register();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          shiftCOrShiftCAUp();
          break;
        case 34:
          closeOrCAUp();
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case REGISTER:
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          shiftCOrShiftCAUp();
          break;
        case 34:
          closeOrCAUp();
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case NUMBER:
        number();
        closeOrCAUp();
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 34:
      if (jj_2_3(2)) {
        jj_consume_token(34);
        jj_consume_token(31);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          if (jj_2_1(3)) {
            jj_consume_token(33);
            register();
            jj_consume_token(31);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMBER:
              num_shift();
              break;
            case REGISTER:
              reg_shift();
              break;
            default:
              jj_la1[101] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 33:
              jj_consume_token(33);
              register();
              break;
            default:
              jj_la1[102] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case REGISTER:
          if (jj_2_2(2)) {
            register();
            jj_consume_token(31);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMBER:
              num_shift();
              break;
            case REGISTER:
              reg_shift();
              break;
            default:
              jj_la1[103] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case REGISTER:
              register();
              break;
            default:
              jj_la1[104] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case NUMBER:
          number();
          break;
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          closeOrCAUp();
          break;
        default:
          jj_la1[106] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void shiftCOrShiftCAUp() throws ParseException {
    jj_consume_token(31);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      num_shift();
      break;
    case REGISTER:
      reg_shift();
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    closeOrCAUp();
  }

  static final public void closeOrCAUp() throws ParseException {
    if (jj_2_4(2)) {
      jj_consume_token(34);
      jj_consume_token(35);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void regOrRegShift() throws ParseException {
    if (jj_2_5(2)) {
      reg_shift();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        register();
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void numOrNumShift() throws ParseException {
    if (jj_2_6(2)) {
      num_shift();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        number();
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void reg_shift() throws ParseException {
   ASTshiftLS jjtn001 = new ASTshiftLS(JJTSHIFTLS);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      register();
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSL:
        lsl();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          number();
          break;
        case REGISTER:
          register();
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case LSR:
        lsr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          number();
          break;
        case REGISTER:
          register();
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  3);
   }
    }
  }

  static final public void num_shift() throws ParseException {
   ASTshiftF jjtn001 = new ASTshiftF(JJTSHIFTF);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      number();
      shift();
      num();
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  3);
   }
    }
  }

/*Cond, scond, lsl, lsr, registres, number, hexa*/
  static final public void cond() throws ParseException {
 /*@bgen(jjtree) cond */
 ASTcond jjtn000 = new ASTcond(JJTCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COND);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void scnd() throws ParseException {
 /*@bgen(jjtree) scnd */
 ASTscnd jjtn000 = new ASTscnd(JJTSCND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SCND);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lsl() throws ParseException {
 /*@bgen(jjtree) lsl */
 ASTlsl jjtn000 = new ASTlsl(JJTLSL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LSL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.value = t.image.toString();
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lsr() throws ParseException {
 /*@bgen(jjtree) lsr */
 ASTlsr jjtn000 = new ASTlsr(JJTLSR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LSR);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.value = t.image.toString();
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void shift() throws ParseException {
 /*@bgen(jjtree) shift */
 ASTshift jjtn000 = new ASTshift(JJTSHIFT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHIFT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.value = t.image.toString();
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void register() throws ParseException {
 /*@bgen(jjtree) register */
 ASTregister jjtn000 = new ASTregister(JJTREGISTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REGISTER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.data.put("reg", t.image.toString());
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void number() throws ParseException {
 /*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.data.put("value", t.image.toString());
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void hexa() throws ParseException {
 /*@bgen(jjtree) hexa */
 ASThexa jjtn000 = new ASThexa(JJTHEXA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HEXA);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.data.put("hexa", t.image.toString());
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void num() throws ParseException {
 /*@bgen(jjtree) num */
 ASTnum jjtn000 = new ASTnum(JJTNUM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.data.put("num", t.image.toString());
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(SHIFT)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyTestTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[115];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7fffc00,0x7fffc00,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000020,0x38000000,0x38000000,0x10000020,0x38000000,0x38000000,0x10000020,0x38000000,0x38000000,0x10000020,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x38000000,0x38000000,0x10000040,0x38000000,0x38000000,0x10000040,0x10000060,0x80000000,0x80000000,0x18000000,0x18000000,0x0,0x18000000,0x10000000,0x18000000,0x0,0x80000000,0x18000000,0x0,0x10000000,0x8000000,0x18000000,0x18000000,0x180,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x2,0x0,0x2,0x0,0x0,0x2,0x4,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyTest(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyTest(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyTestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 115; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 115; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyTest(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyTestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 115; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 115; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyTest(MyTestTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 115; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyTestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 115; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 115; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
