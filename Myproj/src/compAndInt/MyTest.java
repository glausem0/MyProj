/* Generated By:JJTree&JavaCC: Do not edit this line. MyTest.java */
package compAndInt;

import java.io.*;
import registers.Register;

public class MyTest/*@bgen(jjtree)*/implements MyTestTreeConstants, MyTestConstants {/*@bgen(jjtree)*/
  protected static JJTMyTestState jjtree = new JJTMyTestState();
  public static void main(String args []) throws Exception
  {
    MyTest parser = new MyTest(new FileReader("c:/Users/moi/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));
    //MyTest parser = new MyTest(new FileReader("c:/Users/Mélanie/Documents/GitHub/MyProj/Myproj/src/compAndInt/test.txt"));        SimpleNode root = parser.prog();

    System.out.println("Abstract Syntax Tree:");
    root.dump(" ");

    System.out.println("Prog:");
    Visitors vi = new Visitors();
    root.jjtAccept(vi,null);

    vi.print();

   }

  static final public SimpleNode prog() throws ParseException {
 /*@bgen(jjtree) prog */
  ASTprog jjtn000 = new ASTprog(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MOV:
        case MVN:
        case ADD:
        case ADC:
        case SUB:
        case SBC:
        case RSB:
        case RSC:
        case CMP:
        case CMN:
        case TEQ:
        case TST:
        case AND:
        case BIC:
        case EOR:
        case ORR:
        case LDR:
        case STR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        instr();
      }
      jj_consume_token(0);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void instr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOV:
      mov();
      break;
    case MVN:
      mvn();
      break;
    case ADD:
      add();
      break;
    case ADC:
      adc();
      break;
    case SUB:
      sub();
      break;
    case SBC:
      sbc();
      break;
    case RSB:
      rsb();
      break;
    case RSC:
      rsc();
      break;
    case CMP:
      cmp();
      break;
    case CMN:
      cmn();
      break;
    case TEQ:
      teq();
      break;
    case TST:
      tst();
      break;
    case AND:
      and();
      break;
    case BIC:
      bic();
      break;
    case EOR:
      eor();
      break;
    case ORR:
      orr();
      break;
    case LDR:
      ldr();
      break;
    case STR:
      str();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mov() throws ParseException {
    jj_consume_token(MOV);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdecl jjtn001 = new ASTdecl(JJTDECL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
        }
        break;
      case SCND:
        ASTdeclS jjtn002 = new ASTdeclS(JJTDECLS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdeclC jjtn003 = new ASTdeclC(JJTDECLC);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  3);
        }
        }
        break;
      case SCND:
        ASTdeclCS jjtn004 = new ASTdeclCS(JJTDECLCS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  4);
        }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void mvn() throws ParseException {
    jj_consume_token(MVN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdecln jjtn001 = new ASTdecln(JJTDECLN);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
        }
        }
        break;
      case SCND:
        ASTdeclnS jjtn002 = new ASTdeclnS(JJTDECLNS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  3);
        }
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTdeclnC jjtn003 = new ASTdeclnC(JJTDECLNC);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
        } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  3);
        }
        }
        break;
      case SCND:
        ASTdeclnCS jjtn004 = new ASTdeclnCS(JJTDECLNCS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  4);
        }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void add() throws ParseException {
    jj_consume_token(ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTadd jjtn001 = new ASTadd(JJTADD);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTaddS jjtn002 = new ASTaddS(JJTADDS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTaddC jjtn003 = new ASTaddC(JJTADDC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTaddCS jjtn004 = new ASTaddCS(JJTADDCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void adc() throws ParseException {
    jj_consume_token(ADC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTadc jjtn001 = new ASTadc(JJTADC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTadcS jjtn002 = new ASTadcS(JJTADCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTadcC jjtn003 = new ASTadcC(JJTADCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTadcCS jjtn004 = new ASTadcCS(JJTADCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sub() throws ParseException {
    jj_consume_token(SUB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTsub jjtn001 = new ASTsub(JJTSUB);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTsubS jjtn002 = new ASTsubS(JJTSUBS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTsubC jjtn003 = new ASTsubC(JJTSUBC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTsubCS jjtn004 = new ASTsubCS(JJTSUBCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sbc() throws ParseException {
    jj_consume_token(SBC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTsbc jjtn001 = new ASTsbc(JJTSBC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTsbcS jjtn002 = new ASTsbcS(JJTSBCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTsbcC jjtn003 = new ASTsbcC(JJTSBCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[40] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTsbcCS jjtn004 = new ASTsbcCS(JJTSBCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void rsb() throws ParseException {
    jj_consume_token(RSB);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTrsb jjtn001 = new ASTrsb(JJTRSB);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTrsbS jjtn002 = new ASTrsbS(JJTRSBS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTrsbC jjtn003 = new ASTrsbC(JJTRSBC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTrsbCS jjtn004 = new ASTrsbCS(JJTRSBCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void rsc() throws ParseException {
    jj_consume_token(RSC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTrsc jjtn001 = new ASTrsc(JJTRSC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTrscS jjtn002 = new ASTrscS(JJTRSCS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTrscC jjtn003 = new ASTrscC(JJTRSCC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTrscCS jjtn004 = new ASTrscCS(JJTRSCCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[55] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cmp() throws ParseException {
    jj_consume_token(CMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTcmp jjtn001 = new ASTcmp(JJTCMP);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTcmpC jjtn002 = new ASTcmpC(JJTCMPC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cmn() throws ParseException {
    jj_consume_token(CMN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTcmn jjtn001 = new ASTcmn(JJTCMN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTcmnC jjtn002 = new ASTcmnC(JJTCMNC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void teq() throws ParseException {
    jj_consume_token(TEQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTteq jjtn001 = new ASTteq(JJTTEQ);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTteqC jjtn002 = new ASTteqC(JJTTEQC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void tst() throws ParseException {
    jj_consume_token(TST);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      ASTtst jjtn001 = new ASTtst(JJTTST);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
      }
      break;
    case COND:
      ASTtstC jjtn002 = new ASTtstC(JJTTSTC);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        cond();
        register();
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HEXA:
          hexa();
          break;
        case NUMBER:
          numOrNumShift();
          break;
        case REGISTER:
          regOrRegShift();
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  3);
      }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void and() throws ParseException {
    jj_consume_token(AND);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTand jjtn001 = new ASTand(JJTAND);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[70] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTandS jjtn002 = new ASTandS(JJTANDS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTandC jjtn003 = new ASTandC(JJTANDC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTandCS jjtn004 = new ASTandCS(JJTANDCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bic() throws ParseException {
    jj_consume_token(BIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTbic jjtn001 = new ASTbic(JJTBIC);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTbicS jjtn002 = new ASTbicS(JJTBICS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTbicC jjtn003 = new ASTbicC(JJTBICC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTbicCS jjtn004 = new ASTbicCS(JJTBICCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[81] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void eor() throws ParseException {
    jj_consume_token(EOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTeor jjtn001 = new ASTeor(JJTEOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTeorS jjtn002 = new ASTeorS(JJTEORS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTeorC jjtn003 = new ASTeorC(JJTEORC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTeorCS jjtn004 = new ASTeorCS(JJTEORCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[88] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void orr() throws ParseException {
    jj_consume_token(ORR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCND:
    case REGISTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        ASTorr jjtn001 = new ASTorr(JJTORR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[91] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  3);
        }
        }
        break;
      case SCND:
        ASTorrS jjtn002 = new ASTorrS(JJTORRS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
        } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  4);
        }
        }
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case COND:
      cond();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
       ASTorrC jjtn003 = new ASTorrC(JJTORRC);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[94] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
        } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003,  4);
       }
        }
        break;
      case SCND:
       ASTorrCS jjtn004 = new ASTorrCS(JJTORRCS);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          scnd();
          register();
          jj_consume_token(34);
          register();
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEXA:
            hexa();
            break;
          case NUMBER:
            numOrNumShift();
            break;
          case REGISTER:
            regOrRegShift();
            break;
          default:
            jj_la1[95] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte004) {
       if (jjtc004) {
         jjtree.clearNodeScope(jjtn004);
         jjtc004 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte004 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte004;}
       }
       if (jjte004 instanceof ParseException) {
         {if (true) throw (ParseException)jjte004;}
       }
       {if (true) throw (Error)jjte004;}
        } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004,  5);
       }
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ldr() throws ParseException {
    jj_consume_token(LDR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      register();
      jj_consume_token(34);
      jj_consume_token(35);
      register();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ASTldrPreNeg jjtn001 = new ASTldrPreNeg(JJTLDRPRENEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(36);
            if (jj_2_1(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[98] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case REGISTER:
                register();
                break;
              default:
                jj_la1[99] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  4);
          }
          }
          break;
        case NUMBER:
        case REGISTER:
          ASTldrPrePos jjtn002 = new ASTldrPrePos(JJTLDRPREPOS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            if (jj_2_2(3)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[100] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case REGISTER:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[101] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[102] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
          } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  4);
          }
          }
          break;
        default:
          jj_la1[103] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        if (jj_2_5(2)) {
          jj_consume_token(37);
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
           ASTldrPostNeg jjtn003 = new ASTldrPostNeg(JJTLDRPOSTNEG);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
            try {
              jj_consume_token(36);
              if (jj_2_3(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[104] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[105] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte003;}
           }
           if (jjte003 instanceof ParseException) {
             {if (true) throw (ParseException)jjte003;}
           }
           {if (true) throw (Error)jjte003;}
            } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  3);
           }
            }
            break;
          case NUMBER:
          case REGISTER:
           ASTldrPostPos jjtn004 = new ASTldrPostPos(JJTLDRPOSTPOS);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
            try {
              if (jj_2_4(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[106] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[107] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
            } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  3);
           }
            }
            break;
          default:
            jj_la1[108] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 37:
            ASTldrSimple jjtn005 = new ASTldrSimple(JJTLDRSIMPLE);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            try {
              closeOrCAUp();
            } catch (Throwable jjte005) {
            if (jjtc005) {
              jjtree.clearNodeScope(jjtn005);
              jjtc005 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte005 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte005;}
            }
            if (jjte005 instanceof ParseException) {
              {if (true) throw (ParseException)jjte005;}
            }
            {if (true) throw (Error)jjte005;}
            } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005,  3);
            }
            }
            break;
          default:
            jj_la1[109] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case B:
      bCond();
      register();
      jj_consume_token(34);
      jj_consume_token(35);
      register();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ASTldrBPreNeg jjtn006 = new ASTldrBPreNeg(JJTLDRBPRENEG);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(36);
            if (jj_2_6(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[111] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case REGISTER:
                register();
                break;
              default:
                jj_la1[112] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
          } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006,  4);
          }
          }
          break;
        case NUMBER:
        case REGISTER:
          ASTldrBPrePos jjtn007 = new ASTldrBPrePos(JJTLDRBPREPOS);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          try {
            if (jj_2_7(3)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[113] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case REGISTER:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[114] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[115] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte007) {
          if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte007;}
          }
          if (jjte007 instanceof ParseException) {
            {if (true) throw (ParseException)jjte007;}
          }
          {if (true) throw (Error)jjte007;}
          } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007,  4);
          }
          }
          break;
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        if (jj_2_10(2)) {
          jj_consume_token(37);
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
           ASTldrBPostNeg jjtn008 = new ASTldrBPostNeg(JJTLDRBPOSTNEG);
           boolean jjtc008 = true;
           jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(36);
              if (jj_2_8(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[117] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[118] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte008) {
           if (jjtc008) {
             jjtree.clearNodeScope(jjtn008);
             jjtc008 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte008 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte008;}
           }
           if (jjte008 instanceof ParseException) {
             {if (true) throw (ParseException)jjte008;}
           }
           {if (true) throw (Error)jjte008;}
            } finally {
           if (jjtc008) {
             jjtree.closeNodeScope(jjtn008,  3);
           }
            }
            break;
          case NUMBER:
          case REGISTER:
           ASTldrBPostPos jjtn009 = new ASTldrBPostPos(JJTLDRBPOSTPOS);
           boolean jjtc009 = true;
           jjtree.openNodeScope(jjtn009);
            try {
              if (jj_2_9(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[119] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[120] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte009) {
           if (jjtc009) {
             jjtree.clearNodeScope(jjtn009);
             jjtc009 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte009 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte009;}
           }
           if (jjte009 instanceof ParseException) {
             {if (true) throw (ParseException)jjte009;}
           }
           {if (true) throw (Error)jjte009;}
            } finally {
           if (jjtc009) {
             jjtree.closeNodeScope(jjtn009,  3);
           }
            }
            break;
          default:
            jj_la1[121] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 37:
            ASTldrBSimple jjtn010 = new ASTldrBSimple(JJTLDRBSIMPLE);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
            try {
              closeOrCAUp();
            } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte010;}
            }
            if (jjte010 instanceof ParseException) {
              {if (true) throw (ParseException)jjte010;}
            }
            {if (true) throw (Error)jjte010;}
            } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010,  3);
            }
            }
            break;
          default:
            jj_la1[122] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case H:
      hCond();
      register();
      jj_consume_token(34);
      jj_consume_token(35);
      register();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ASTldrHPreNeg jjtn011 = new ASTldrHPreNeg(JJTLDRHPRENEG);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          try {
            jj_consume_token(36);
            if (jj_2_11(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[124] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case REGISTER:
                register();
                break;
              default:
                jj_la1[125] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte011) {
          if (jjtc011) {
            jjtree.clearNodeScope(jjtn011);
            jjtc011 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte011 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte011;}
          }
          if (jjte011 instanceof ParseException) {
            {if (true) throw (ParseException)jjte011;}
          }
          {if (true) throw (Error)jjte011;}
          } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011,  4);
          }
          }
          break;
        case NUMBER:
        case REGISTER:
          ASTldrHPrePos jjtn012 = new ASTldrHPrePos(JJTLDRHPREPOS);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
          try {
            if (jj_2_12(3)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[126] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case REGISTER:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[127] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[128] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte012) {
          if (jjtc012) {
            jjtree.clearNodeScope(jjtn012);
            jjtc012 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte012 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte012;}
          }
          if (jjte012 instanceof ParseException) {
            {if (true) throw (ParseException)jjte012;}
          }
          {if (true) throw (Error)jjte012;}
          } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012,  4);
          }
          }
          break;
        default:
          jj_la1[129] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        if (jj_2_15(2)) {
          jj_consume_token(37);
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
           ASTldrHPostNeg jjtn013 = new ASTldrHPostNeg(JJTLDRHPOSTNEG);
           boolean jjtc013 = true;
           jjtree.openNodeScope(jjtn013);
            try {
              jj_consume_token(36);
              if (jj_2_13(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[130] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[131] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte013) {
           if (jjtc013) {
             jjtree.clearNodeScope(jjtn013);
             jjtc013 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte013 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte013;}
           }
           if (jjte013 instanceof ParseException) {
             {if (true) throw (ParseException)jjte013;}
           }
           {if (true) throw (Error)jjte013;}
            } finally {
           if (jjtc013) {
             jjtree.closeNodeScope(jjtn013,  3);
           }
            }
            break;
          case NUMBER:
          case REGISTER:
           ASTldrHPostPos jjtn014 = new ASTldrHPostPos(JJTLDRHPOSTPOS);
           boolean jjtc014 = true;
           jjtree.openNodeScope(jjtn014);
            try {
              if (jj_2_14(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[132] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[133] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte014) {
           if (jjtc014) {
             jjtree.clearNodeScope(jjtn014);
             jjtc014 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte014 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte014;}
           }
           if (jjte014 instanceof ParseException) {
             {if (true) throw (ParseException)jjte014;}
           }
           {if (true) throw (Error)jjte014;}
            } finally {
           if (jjtc014) {
             jjtree.closeNodeScope(jjtn014,  3);
           }
            }
            break;
          default:
            jj_la1[134] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 37:
            ASTldrHSimple jjtn015 = new ASTldrHSimple(JJTLDRHSIMPLE);
            boolean jjtc015 = true;
            jjtree.openNodeScope(jjtn015);
            try {
              closeOrCAUp();
            } catch (Throwable jjte015) {
            if (jjtc015) {
              jjtree.clearNodeScope(jjtn015);
              jjtc015 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte015 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte015;}
            }
            if (jjte015 instanceof ParseException) {
              {if (true) throw (ParseException)jjte015;}
            }
            {if (true) throw (Error)jjte015;}
            } finally {
            if (jjtc015) {
              jjtree.closeNodeScope(jjtn015,  3);
            }
            }
            break;
          default:
            jj_la1[135] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SCND:
      scnd();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        register();
        jj_consume_token(34);
        jj_consume_token(35);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          ASTldrSPreNeg jjtn016 = new ASTldrSPreNeg(JJTLDRSPRENEG);
          boolean jjtc016 = true;
          jjtree.openNodeScope(jjtn016);
            try {
              jj_consume_token(36);
              if (jj_2_16(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[137] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[138] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte016) {
          if (jjtc016) {
            jjtree.clearNodeScope(jjtn016);
            jjtc016 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte016 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte016;}
          }
          if (jjte016 instanceof ParseException) {
            {if (true) throw (ParseException)jjte016;}
          }
          {if (true) throw (Error)jjte016;}
            } finally {
          if (jjtc016) {
            jjtree.closeNodeScope(jjtn016,  4);
          }
            }
            break;
          case NUMBER:
          case REGISTER:
          ASTldrSPrePos jjtn017 = new ASTldrSPrePos(JJTLDRSPREPOS);
          boolean jjtc017 = true;
          jjtree.openNodeScope(jjtn017);
            try {
              if (jj_2_17(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[139] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case REGISTER:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[140] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[141] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte017) {
          if (jjtc017) {
            jjtree.clearNodeScope(jjtn017);
            jjtc017 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte017 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte017;}
          }
          if (jjte017 instanceof ParseException) {
            {if (true) throw (ParseException)jjte017;}
          }
          {if (true) throw (Error)jjte017;}
            } finally {
          if (jjtc017) {
            jjtree.closeNodeScope(jjtn017,  4);
          }
            }
            break;
          default:
            jj_la1[142] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 37:
          if (jj_2_20(2)) {
            jj_consume_token(37);
            jj_consume_token(34);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 36:
           ASTldrSPostNeg jjtn018 = new ASTldrSPostNeg(JJTLDRSPOSTNEG);
           boolean jjtc018 = true;
           jjtree.openNodeScope(jjtn018);
              try {
                jj_consume_token(36);
                if (jj_2_18(2)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[143] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  default:
                    jj_la1[144] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte018) {
           if (jjtc018) {
             jjtree.clearNodeScope(jjtn018);
             jjtc018 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte018 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte018;}
           }
           if (jjte018 instanceof ParseException) {
             {if (true) throw (ParseException)jjte018;}
           }
           {if (true) throw (Error)jjte018;}
              } finally {
           if (jjtc018) {
             jjtree.closeNodeScope(jjtn018,  3);
           }
              }
              break;
            case NUMBER:
            case REGISTER:
           ASTldrSPostPos jjtn019 = new ASTldrSPostPos(JJTLDRSPOSTPOS);
           boolean jjtc019 = true;
           jjtree.openNodeScope(jjtn019);
              try {
                if (jj_2_19(3)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[145] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[146] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte019) {
           if (jjtc019) {
             jjtree.clearNodeScope(jjtn019);
             jjtc019 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte019 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte019;}
           }
           if (jjte019 instanceof ParseException) {
             {if (true) throw (ParseException)jjte019;}
           }
           {if (true) throw (Error)jjte019;}
              } finally {
           if (jjtc019) {
             jjtree.closeNodeScope(jjtn019,  3);
           }
              }
              break;
            default:
              jj_la1[147] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
            ASTldrSSimple jjtn020 = new ASTldrSSimple(JJTLDRSSIMPLE);
            boolean jjtc020 = true;
            jjtree.openNodeScope(jjtn020);
              try {
                closeOrCAUp();
              } catch (Throwable jjte020) {
            if (jjtc020) {
              jjtree.clearNodeScope(jjtn020);
              jjtc020 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte020 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte020;}
            }
            if (jjte020 instanceof ParseException) {
              {if (true) throw (ParseException)jjte020;}
            }
            {if (true) throw (Error)jjte020;}
              } finally {
            if (jjtc020) {
              jjtree.closeNodeScope(jjtn020,  3);
            }
              }
              break;
            default:
              jj_la1[148] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case H:
        hCond();
        register();
        jj_consume_token(34);
        jj_consume_token(35);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          ASTldrSHPreNeg jjtn021 = new ASTldrSHPreNeg(JJTLDRSHPRENEG);
          boolean jjtc021 = true;
          jjtree.openNodeScope(jjtn021);
            try {
              jj_consume_token(36);
              if (jj_2_21(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[150] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[151] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte021) {
          if (jjtc021) {
            jjtree.clearNodeScope(jjtn021);
            jjtc021 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte021 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte021;}
          }
          if (jjte021 instanceof ParseException) {
            {if (true) throw (ParseException)jjte021;}
          }
          {if (true) throw (Error)jjte021;}
            } finally {
          if (jjtc021) {
            jjtree.closeNodeScope(jjtn021,  4);
          }
            }
            break;
          case NUMBER:
          case REGISTER:
          ASTldrSHPrePos jjtn022 = new ASTldrSHPrePos(JJTLDRSHPREPOS);
          boolean jjtc022 = true;
          jjtree.openNodeScope(jjtn022);
            try {
              if (jj_2_22(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[152] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case REGISTER:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[153] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[154] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte022) {
          if (jjtc022) {
            jjtree.clearNodeScope(jjtn022);
            jjtc022 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte022 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte022;}
          }
          if (jjte022 instanceof ParseException) {
            {if (true) throw (ParseException)jjte022;}
          }
          {if (true) throw (Error)jjte022;}
            } finally {
          if (jjtc022) {
            jjtree.closeNodeScope(jjtn022,  4);
          }
            }
            break;
          default:
            jj_la1[155] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 37:
          if (jj_2_25(2)) {
            jj_consume_token(37);
            jj_consume_token(34);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 36:
           ASTldrSHPostNeg jjtn023 = new ASTldrSHPostNeg(JJTLDRSHPOSTNEG);
           boolean jjtc023 = true;
           jjtree.openNodeScope(jjtn023);
              try {
                jj_consume_token(36);
                if (jj_2_23(2)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[156] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  default:
                    jj_la1[157] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte023) {
           if (jjtc023) {
             jjtree.clearNodeScope(jjtn023);
             jjtc023 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte023 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte023;}
           }
           if (jjte023 instanceof ParseException) {
             {if (true) throw (ParseException)jjte023;}
           }
           {if (true) throw (Error)jjte023;}
              } finally {
           if (jjtc023) {
             jjtree.closeNodeScope(jjtn023,  3);
           }
              }
              break;
            case NUMBER:
            case REGISTER:
           ASTldrSHPostPos jjtn024 = new ASTldrSHPostPos(JJTLDRSHPOSTPOS);
           boolean jjtc024 = true;
           jjtree.openNodeScope(jjtn024);
              try {
                if (jj_2_24(3)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[158] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[159] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte024) {
           if (jjtc024) {
             jjtree.clearNodeScope(jjtn024);
             jjtc024 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte024 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte024;}
           }
           if (jjte024 instanceof ParseException) {
             {if (true) throw (ParseException)jjte024;}
           }
           {if (true) throw (Error)jjte024;}
              } finally {
           if (jjtc024) {
             jjtree.closeNodeScope(jjtn024,  3);
           }
              }
              break;
            default:
              jj_la1[160] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
            ASTldrSHSimple jjtn025 = new ASTldrSHSimple(JJTLDRSHSIMPLE);
            boolean jjtc025 = true;
            jjtree.openNodeScope(jjtn025);
              try {
                closeOrCAUp();
              } catch (Throwable jjte025) {
            if (jjtc025) {
              jjtree.clearNodeScope(jjtn025);
              jjtc025 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte025 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte025;}
            }
            if (jjte025 instanceof ParseException) {
              {if (true) throw (ParseException)jjte025;}
            }
            {if (true) throw (Error)jjte025;}
              } finally {
            if (jjtc025) {
              jjtree.closeNodeScope(jjtn025,  3);
            }
              }
              break;
            default:
              jj_la1[161] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[162] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case B:
        bCond();
        register();
        jj_consume_token(34);
        jj_consume_token(35);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          ASTldrSBPreNeg jjtn026 = new ASTldrSBPreNeg(JJTLDRSBPRENEG);
          boolean jjtc026 = true;
          jjtree.openNodeScope(jjtn026);
            try {
              jj_consume_token(36);
              if (jj_2_26(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[163] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[164] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte026) {
          if (jjtc026) {
            jjtree.clearNodeScope(jjtn026);
            jjtc026 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte026 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte026;}
          }
          if (jjte026 instanceof ParseException) {
            {if (true) throw (ParseException)jjte026;}
          }
          {if (true) throw (Error)jjte026;}
            } finally {
          if (jjtc026) {
            jjtree.closeNodeScope(jjtn026,  4);
          }
            }
            break;
          case NUMBER:
          case REGISTER:
          ASTldrSBPrePos jjtn027 = new ASTldrSBPrePos(JJTLDRSBPREPOS);
          boolean jjtc027 = true;
          jjtree.openNodeScope(jjtn027);
            try {
              if (jj_2_27(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[165] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case REGISTER:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[166] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[167] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte027) {
          if (jjtc027) {
            jjtree.clearNodeScope(jjtn027);
            jjtc027 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte027 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte027;}
          }
          if (jjte027 instanceof ParseException) {
            {if (true) throw (ParseException)jjte027;}
          }
          {if (true) throw (Error)jjte027;}
            } finally {
          if (jjtc027) {
            jjtree.closeNodeScope(jjtn027,  4);
          }
            }
            break;
          default:
            jj_la1[168] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 37:
          if (jj_2_30(2)) {
            jj_consume_token(37);
            jj_consume_token(34);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 36:
           ASTldrSBPostNeg jjtn028 = new ASTldrSBPostNeg(JJTLDRSBPOSTNEG);
           boolean jjtc028 = true;
           jjtree.openNodeScope(jjtn028);
              try {
                jj_consume_token(36);
                if (jj_2_28(2)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[169] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  default:
                    jj_la1[170] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte028) {
           if (jjtc028) {
             jjtree.clearNodeScope(jjtn028);
             jjtc028 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte028 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte028;}
           }
           if (jjte028 instanceof ParseException) {
             {if (true) throw (ParseException)jjte028;}
           }
           {if (true) throw (Error)jjte028;}
              } finally {
           if (jjtc028) {
             jjtree.closeNodeScope(jjtn028,  3);
           }
              }
              break;
            case NUMBER:
            case REGISTER:
           ASTldrSBPostPos jjtn029 = new ASTldrSBPostPos(JJTLDRSBPOSTPOS);
           boolean jjtc029 = true;
           jjtree.openNodeScope(jjtn029);
              try {
                if (jj_2_29(3)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[171] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[172] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte029) {
           if (jjtc029) {
             jjtree.clearNodeScope(jjtn029);
             jjtc029 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte029 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte029;}
           }
           if (jjte029 instanceof ParseException) {
             {if (true) throw (ParseException)jjte029;}
           }
           {if (true) throw (Error)jjte029;}
              } finally {
           if (jjtc029) {
             jjtree.closeNodeScope(jjtn029,  3);
           }
              }
              break;
            default:
              jj_la1[173] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
            ASTldrSBSimple jjtn030 = new ASTldrSBSimple(JJTLDRSBSIMPLE);
            boolean jjtc030 = true;
            jjtree.openNodeScope(jjtn030);
              try {
                closeOrCAUp();
              } catch (Throwable jjte030) {
            if (jjtc030) {
              jjtree.clearNodeScope(jjtn030);
              jjtc030 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte030 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte030;}
            }
            if (jjte030 instanceof ParseException) {
              {if (true) throw (ParseException)jjte030;}
            }
            {if (true) throw (Error)jjte030;}
              } finally {
            if (jjtc030) {
              jjtree.closeNodeScope(jjtn030,  3);
            }
              }
              break;
            default:
              jj_la1[174] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[175] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[176] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void str() throws ParseException {
    jj_consume_token(STR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REGISTER:
      register();
      jj_consume_token(34);
      jj_consume_token(35);
      register();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ASTstrPreNeg jjtn001 = new ASTstrPreNeg(JJTSTRPRENEG);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(36);
            if (jj_2_31(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[178] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case REGISTER:
                register();
                break;
              default:
                jj_la1[179] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  4);
          }
          }
          break;
        case NUMBER:
        case REGISTER:
          ASTstrPrePos jjtn002 = new ASTstrPrePos(JJTSTRPREPOS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            if (jj_2_32(3)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[180] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case REGISTER:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[181] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[182] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
          } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  4);
          }
          }
          break;
        default:
          jj_la1[183] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        if (jj_2_35(2)) {
          jj_consume_token(37);
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
           ASTstrPostNeg jjtn003 = new ASTstrPostNeg(JJTSTRPOSTNEG);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
            try {
              jj_consume_token(36);
              if (jj_2_33(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[184] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[185] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte003;}
           }
           if (jjte003 instanceof ParseException) {
             {if (true) throw (ParseException)jjte003;}
           }
           {if (true) throw (Error)jjte003;}
            } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  3);
           }
            }
            break;
          case NUMBER:
          case REGISTER:
           ASTstrPostPos jjtn004 = new ASTstrPostPos(JJTSTRPOSTPOS);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
            try {
              if (jj_2_34(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[186] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[187] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
            } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  3);
           }
            }
            break;
          default:
            jj_la1[188] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 37:
            ASTstrSimple jjtn005 = new ASTstrSimple(JJTSTRSIMPLE);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            try {
              closeOrCAUp();
            } catch (Throwable jjte005) {
            if (jjtc005) {
              jjtree.clearNodeScope(jjtn005);
              jjtc005 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte005 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte005;}
            }
            if (jjte005 instanceof ParseException) {
              {if (true) throw (ParseException)jjte005;}
            }
            {if (true) throw (Error)jjte005;}
            } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005,  3);
            }
            }
            break;
          default:
            jj_la1[189] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[190] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case B:
      bCond();
      register();
      jj_consume_token(34);
      jj_consume_token(35);
      register();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ASTstrBPreNeg jjtn006 = new ASTstrBPreNeg(JJTSTRBPRENEG);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(36);
            if (jj_2_36(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[191] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case REGISTER:
                register();
                break;
              default:
                jj_la1[192] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte006;}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) throw (ParseException)jjte006;}
          }
          {if (true) throw (Error)jjte006;}
          } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006,  4);
          }
          }
          break;
        case NUMBER:
        case REGISTER:
          ASTstrBPrePos jjtn007 = new ASTstrBPrePos(JJTSTRBPREPOS);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          try {
            if (jj_2_37(3)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[193] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case REGISTER:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[194] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[195] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte007) {
          if (jjtc007) {
            jjtree.clearNodeScope(jjtn007);
            jjtc007 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte007 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte007;}
          }
          if (jjte007 instanceof ParseException) {
            {if (true) throw (ParseException)jjte007;}
          }
          {if (true) throw (Error)jjte007;}
          } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007,  4);
          }
          }
          break;
        default:
          jj_la1[196] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        if (jj_2_40(2)) {
          jj_consume_token(37);
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
           ASTstrBPostNeg jjtn008 = new ASTstrBPostNeg(JJTSTRBPOSTNEG);
           boolean jjtc008 = true;
           jjtree.openNodeScope(jjtn008);
            try {
              jj_consume_token(36);
              if (jj_2_38(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[197] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[198] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte008) {
           if (jjtc008) {
             jjtree.clearNodeScope(jjtn008);
             jjtc008 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte008 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte008;}
           }
           if (jjte008 instanceof ParseException) {
             {if (true) throw (ParseException)jjte008;}
           }
           {if (true) throw (Error)jjte008;}
            } finally {
           if (jjtc008) {
             jjtree.closeNodeScope(jjtn008,  3);
           }
            }
            break;
          case NUMBER:
          case REGISTER:
           ASTstrBPostPos jjtn009 = new ASTstrBPostPos(JJTSTRBPOSTPOS);
           boolean jjtc009 = true;
           jjtree.openNodeScope(jjtn009);
            try {
              if (jj_2_39(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[199] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[200] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte009) {
           if (jjtc009) {
             jjtree.clearNodeScope(jjtn009);
             jjtc009 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte009 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte009;}
           }
           if (jjte009 instanceof ParseException) {
             {if (true) throw (ParseException)jjte009;}
           }
           {if (true) throw (Error)jjte009;}
            } finally {
           if (jjtc009) {
             jjtree.closeNodeScope(jjtn009,  3);
           }
            }
            break;
          default:
            jj_la1[201] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 37:
            ASTstrBSimple jjtn010 = new ASTstrBSimple(JJTSTRBSIMPLE);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
            try {
              closeOrCAUp();
            } catch (Throwable jjte010) {
            if (jjtc010) {
              jjtree.clearNodeScope(jjtn010);
              jjtc010 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte010 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte010;}
            }
            if (jjte010 instanceof ParseException) {
              {if (true) throw (ParseException)jjte010;}
            }
            {if (true) throw (Error)jjte010;}
            } finally {
            if (jjtc010) {
              jjtree.closeNodeScope(jjtn010,  3);
            }
            }
            break;
          default:
            jj_la1[202] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[203] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case H:
      hCond();
      register();
      jj_consume_token(34);
      jj_consume_token(35);
      register();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          ASTstrHPreNeg jjtn011 = new ASTstrHPreNeg(JJTSTRHPRENEG);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          try {
            jj_consume_token(36);
            if (jj_2_41(2)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[204] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case REGISTER:
                register();
                break;
              default:
                jj_la1[205] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte011) {
          if (jjtc011) {
            jjtree.clearNodeScope(jjtn011);
            jjtc011 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte011 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte011;}
          }
          if (jjte011 instanceof ParseException) {
            {if (true) throw (ParseException)jjte011;}
          }
          {if (true) throw (Error)jjte011;}
          } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011,  4);
          }
          }
          break;
        case NUMBER:
        case REGISTER:
          ASTstrHPrePos jjtn012 = new ASTstrHPrePos(JJTSTRHPREPOS);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
          try {
            if (jj_2_42(3)) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                num_shift();
                break;
              case REGISTER:
                reg_shift();
                break;
              default:
                jj_la1[206] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
              case REGISTER:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[207] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
              default:
                jj_la1[208] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            closeOrCAUp();
          } catch (Throwable jjte012) {
          if (jjtc012) {
            jjtree.clearNodeScope(jjtn012);
            jjtc012 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte012 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte012;}
          }
          if (jjte012 instanceof ParseException) {
            {if (true) throw (ParseException)jjte012;}
          }
          {if (true) throw (Error)jjte012;}
          } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012,  4);
          }
          }
          break;
        default:
          jj_la1[209] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 37:
        if (jj_2_45(2)) {
          jj_consume_token(37);
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
           ASTstrHPostNeg jjtn013 = new ASTstrHPostNeg(JJTSTRHPOSTNEG);
           boolean jjtc013 = true;
           jjtree.openNodeScope(jjtn013);
            try {
              jj_consume_token(36);
              if (jj_2_43(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[210] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[211] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte013) {
           if (jjtc013) {
             jjtree.clearNodeScope(jjtn013);
             jjtc013 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte013 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte013;}
           }
           if (jjte013 instanceof ParseException) {
             {if (true) throw (ParseException)jjte013;}
           }
           {if (true) throw (Error)jjte013;}
            } finally {
           if (jjtc013) {
             jjtree.closeNodeScope(jjtn013,  3);
           }
            }
            break;
          case NUMBER:
          case REGISTER:
           ASTstrHPostPos jjtn014 = new ASTstrHPostPos(JJTSTRHPOSTPOS);
           boolean jjtc014 = true;
           jjtree.openNodeScope(jjtn014);
            try {
              if (jj_2_44(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[212] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                case NUMBER:
                  number();
                  break;
                default:
                  jj_la1[213] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            } catch (Throwable jjte014) {
           if (jjtc014) {
             jjtree.clearNodeScope(jjtn014);
             jjtc014 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte014 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte014;}
           }
           if (jjte014 instanceof ParseException) {
             {if (true) throw (ParseException)jjte014;}
           }
           {if (true) throw (Error)jjte014;}
            } finally {
           if (jjtc014) {
             jjtree.closeNodeScope(jjtn014,  3);
           }
            }
            break;
          default:
            jj_la1[214] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 37:
            ASTstrHSimple jjtn015 = new ASTstrHSimple(JJTSTRHSIMPLE);
            boolean jjtc015 = true;
            jjtree.openNodeScope(jjtn015);
            try {
              closeOrCAUp();
            } catch (Throwable jjte015) {
            if (jjtc015) {
              jjtree.clearNodeScope(jjtn015);
              jjtc015 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte015 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte015;}
            }
            if (jjte015 instanceof ParseException) {
              {if (true) throw (ParseException)jjte015;}
            }
            {if (true) throw (Error)jjte015;}
            } finally {
            if (jjtc015) {
              jjtree.closeNodeScope(jjtn015,  3);
            }
            }
            break;
          default:
            jj_la1[215] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[216] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SCND:
      scnd();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        register();
        jj_consume_token(34);
        jj_consume_token(35);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          ASTstrSPreNeg jjtn016 = new ASTstrSPreNeg(JJTSTRSPRENEG);
          boolean jjtc016 = true;
          jjtree.openNodeScope(jjtn016);
            try {
              jj_consume_token(36);
              if (jj_2_46(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[217] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[218] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte016) {
          if (jjtc016) {
            jjtree.clearNodeScope(jjtn016);
            jjtc016 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte016 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte016;}
          }
          if (jjte016 instanceof ParseException) {
            {if (true) throw (ParseException)jjte016;}
          }
          {if (true) throw (Error)jjte016;}
            } finally {
          if (jjtc016) {
            jjtree.closeNodeScope(jjtn016,  4);
          }
            }
            break;
          case NUMBER:
          case REGISTER:
          ASTstrSPrePos jjtn017 = new ASTstrSPrePos(JJTSTRSPREPOS);
          boolean jjtc017 = true;
          jjtree.openNodeScope(jjtn017);
            try {
              if (jj_2_47(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[219] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case REGISTER:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[220] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[221] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte017) {
          if (jjtc017) {
            jjtree.clearNodeScope(jjtn017);
            jjtc017 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte017 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte017;}
          }
          if (jjte017 instanceof ParseException) {
            {if (true) throw (ParseException)jjte017;}
          }
          {if (true) throw (Error)jjte017;}
            } finally {
          if (jjtc017) {
            jjtree.closeNodeScope(jjtn017,  4);
          }
            }
            break;
          default:
            jj_la1[222] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 37:
          if (jj_2_50(2)) {
            jj_consume_token(37);
            jj_consume_token(34);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 36:
           ASTstrSPostNeg jjtn018 = new ASTstrSPostNeg(JJTSTRSPOSTNEG);
           boolean jjtc018 = true;
           jjtree.openNodeScope(jjtn018);
              try {
                jj_consume_token(36);
                if (jj_2_48(2)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[223] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  default:
                    jj_la1[224] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte018) {
           if (jjtc018) {
             jjtree.clearNodeScope(jjtn018);
             jjtc018 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte018 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte018;}
           }
           if (jjte018 instanceof ParseException) {
             {if (true) throw (ParseException)jjte018;}
           }
           {if (true) throw (Error)jjte018;}
              } finally {
           if (jjtc018) {
             jjtree.closeNodeScope(jjtn018,  3);
           }
              }
              break;
            case NUMBER:
            case REGISTER:
           ASTstrSPostPos jjtn019 = new ASTstrSPostPos(JJTSTRSPOSTPOS);
           boolean jjtc019 = true;
           jjtree.openNodeScope(jjtn019);
              try {
                if (jj_2_49(3)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[225] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[226] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte019) {
           if (jjtc019) {
             jjtree.clearNodeScope(jjtn019);
             jjtc019 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte019 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte019;}
           }
           if (jjte019 instanceof ParseException) {
             {if (true) throw (ParseException)jjte019;}
           }
           {if (true) throw (Error)jjte019;}
              } finally {
           if (jjtc019) {
             jjtree.closeNodeScope(jjtn019,  3);
           }
              }
              break;
            default:
              jj_la1[227] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
            ASTstrSSimple jjtn020 = new ASTstrSSimple(JJTSTRSSIMPLE);
            boolean jjtc020 = true;
            jjtree.openNodeScope(jjtn020);
              try {
                closeOrCAUp();
              } catch (Throwable jjte020) {
            if (jjtc020) {
              jjtree.clearNodeScope(jjtn020);
              jjtc020 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte020 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte020;}
            }
            if (jjte020 instanceof ParseException) {
              {if (true) throw (ParseException)jjte020;}
            }
            {if (true) throw (Error)jjte020;}
              } finally {
            if (jjtc020) {
              jjtree.closeNodeScope(jjtn020,  3);
            }
              }
              break;
            default:
              jj_la1[228] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[229] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case H:
        hCond();
        register();
        jj_consume_token(34);
        jj_consume_token(35);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          ASTstrSHPreNeg jjtn021 = new ASTstrSHPreNeg(JJTSTRSHPRENEG);
          boolean jjtc021 = true;
          jjtree.openNodeScope(jjtn021);
            try {
              jj_consume_token(36);
              if (jj_2_51(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[230] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[231] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte021) {
          if (jjtc021) {
            jjtree.clearNodeScope(jjtn021);
            jjtc021 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte021 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte021;}
          }
          if (jjte021 instanceof ParseException) {
            {if (true) throw (ParseException)jjte021;}
          }
          {if (true) throw (Error)jjte021;}
            } finally {
          if (jjtc021) {
            jjtree.closeNodeScope(jjtn021,  4);
          }
            }
            break;
          case NUMBER:
          case REGISTER:
          ASTstrSHPrePos jjtn022 = new ASTstrSHPrePos(JJTSTRSHPREPOS);
          boolean jjtc022 = true;
          jjtree.openNodeScope(jjtn022);
            try {
              if (jj_2_52(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[232] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case REGISTER:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[233] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[234] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte022) {
          if (jjtc022) {
            jjtree.clearNodeScope(jjtn022);
            jjtc022 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte022 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte022;}
          }
          if (jjte022 instanceof ParseException) {
            {if (true) throw (ParseException)jjte022;}
          }
          {if (true) throw (Error)jjte022;}
            } finally {
          if (jjtc022) {
            jjtree.closeNodeScope(jjtn022,  4);
          }
            }
            break;
          default:
            jj_la1[235] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 37:
          if (jj_2_55(2)) {
            jj_consume_token(37);
            jj_consume_token(34);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 36:
           ASTstrSHPostNeg jjtn023 = new ASTstrSHPostNeg(JJTSTRSHPOSTNEG);
           boolean jjtc023 = true;
           jjtree.openNodeScope(jjtn023);
              try {
                jj_consume_token(36);
                if (jj_2_53(2)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[236] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  default:
                    jj_la1[237] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte023) {
           if (jjtc023) {
             jjtree.clearNodeScope(jjtn023);
             jjtc023 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte023 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte023;}
           }
           if (jjte023 instanceof ParseException) {
             {if (true) throw (ParseException)jjte023;}
           }
           {if (true) throw (Error)jjte023;}
              } finally {
           if (jjtc023) {
             jjtree.closeNodeScope(jjtn023,  3);
           }
              }
              break;
            case NUMBER:
            case REGISTER:
           ASTstrSHPostPos jjtn024 = new ASTstrSHPostPos(JJTSTRSHPOSTPOS);
           boolean jjtc024 = true;
           jjtree.openNodeScope(jjtn024);
              try {
                if (jj_2_54(3)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[238] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[239] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte024) {
           if (jjtc024) {
             jjtree.clearNodeScope(jjtn024);
             jjtc024 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte024 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte024;}
           }
           if (jjte024 instanceof ParseException) {
             {if (true) throw (ParseException)jjte024;}
           }
           {if (true) throw (Error)jjte024;}
              } finally {
           if (jjtc024) {
             jjtree.closeNodeScope(jjtn024,  3);
           }
              }
              break;
            default:
              jj_la1[240] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
            ASTstrSHSimple jjtn025 = new ASTstrSHSimple(JJTSTRSHSIMPLE);
            boolean jjtc025 = true;
            jjtree.openNodeScope(jjtn025);
              try {
                closeOrCAUp();
              } catch (Throwable jjte025) {
            if (jjtc025) {
              jjtree.clearNodeScope(jjtn025);
              jjtc025 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte025 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte025;}
            }
            if (jjte025 instanceof ParseException) {
              {if (true) throw (ParseException)jjte025;}
            }
            {if (true) throw (Error)jjte025;}
              } finally {
            if (jjtc025) {
              jjtree.closeNodeScope(jjtn025,  3);
            }
              }
              break;
            default:
              jj_la1[241] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[242] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case B:
        bCond();
        register();
        jj_consume_token(34);
        jj_consume_token(35);
        register();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          ASTstrSBPreNeg jjtn026 = new ASTstrSBPreNeg(JJTSTRSBPRENEG);
          boolean jjtc026 = true;
          jjtree.openNodeScope(jjtn026);
            try {
              jj_consume_token(36);
              if (jj_2_56(2)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[243] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case REGISTER:
                  register();
                  break;
                default:
                  jj_la1[244] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte026) {
          if (jjtc026) {
            jjtree.clearNodeScope(jjtn026);
            jjtc026 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte026 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte026;}
          }
          if (jjte026 instanceof ParseException) {
            {if (true) throw (ParseException)jjte026;}
          }
          {if (true) throw (Error)jjte026;}
            } finally {
          if (jjtc026) {
            jjtree.closeNodeScope(jjtn026,  4);
          }
            }
            break;
          case NUMBER:
          case REGISTER:
          ASTstrSBPrePos jjtn027 = new ASTstrSBPrePos(JJTSTRSBPREPOS);
          boolean jjtc027 = true;
          jjtree.openNodeScope(jjtn027);
            try {
              if (jj_2_57(3)) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  num_shift();
                  break;
                case REGISTER:
                  reg_shift();
                  break;
                default:
                  jj_la1[245] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                case REGISTER:
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[246] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                  break;
                default:
                  jj_la1[247] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              closeOrCAUp();
            } catch (Throwable jjte027) {
          if (jjtc027) {
            jjtree.clearNodeScope(jjtn027);
            jjtc027 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte027 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte027;}
          }
          if (jjte027 instanceof ParseException) {
            {if (true) throw (ParseException)jjte027;}
          }
          {if (true) throw (Error)jjte027;}
            } finally {
          if (jjtc027) {
            jjtree.closeNodeScope(jjtn027,  4);
          }
            }
            break;
          default:
            jj_la1[248] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case 37:
          if (jj_2_60(2)) {
            jj_consume_token(37);
            jj_consume_token(34);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 36:
           ASTstrSBPostNeg jjtn028 = new ASTstrSBPostNeg(JJTSTRSBPOSTNEG);
           boolean jjtc028 = true;
           jjtree.openNodeScope(jjtn028);
              try {
                jj_consume_token(36);
                if (jj_2_58(2)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[249] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  default:
                    jj_la1[250] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte028) {
           if (jjtc028) {
             jjtree.clearNodeScope(jjtn028);
             jjtc028 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte028 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte028;}
           }
           if (jjte028 instanceof ParseException) {
             {if (true) throw (ParseException)jjte028;}
           }
           {if (true) throw (Error)jjte028;}
              } finally {
           if (jjtc028) {
             jjtree.closeNodeScope(jjtn028,  3);
           }
              }
              break;
            case NUMBER:
            case REGISTER:
           ASTstrSBPostPos jjtn029 = new ASTstrSBPostPos(JJTSTRSBPOSTPOS);
           boolean jjtc029 = true;
           jjtree.openNodeScope(jjtn029);
              try {
                if (jj_2_59(3)) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case NUMBER:
                    num_shift();
                    break;
                  case REGISTER:
                    reg_shift();
                    break;
                  default:
                    jj_la1[251] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case REGISTER:
                    register();
                    break;
                  case NUMBER:
                    number();
                    break;
                  default:
                    jj_la1[252] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte029) {
           if (jjtc029) {
             jjtree.clearNodeScope(jjtn029);
             jjtc029 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte029 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte029;}
           }
           if (jjte029 instanceof ParseException) {
             {if (true) throw (ParseException)jjte029;}
           }
           {if (true) throw (Error)jjte029;}
              } finally {
           if (jjtc029) {
             jjtree.closeNodeScope(jjtn029,  3);
           }
              }
              break;
            default:
              jj_la1[253] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 37:
            ASTstrSBSimple jjtn030 = new ASTstrSBSimple(JJTSTRSBSIMPLE);
            boolean jjtc030 = true;
            jjtree.openNodeScope(jjtn030);
              try {
                closeOrCAUp();
              } catch (Throwable jjte030) {
            if (jjtc030) {
              jjtree.clearNodeScope(jjtn030);
              jjtc030 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte030 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte030;}
            }
            if (jjte030 instanceof ParseException) {
              {if (true) throw (ParseException)jjte030;}
            }
            {if (true) throw (Error)jjte030;}
              } finally {
            if (jjtc030) {
              jjtree.closeNodeScope(jjtn030,  3);
            }
              }
              break;
            default:
              jj_la1[254] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[255] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[256] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[257] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void closeOrCAUp() throws ParseException {
    if (jj_2_61(2)) {
    ASTcloseAUp jjtn001 = new ASTcloseAUp(JJTCLOSEAUP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(37);
        jj_consume_token(38);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
    ASTclose jjtn002 = new ASTclose(JJTCLOSE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(37);
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
        }
        break;
      default:
        jj_la1[258] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void regOrRegShift() throws ParseException {
    if (jj_2_62(2)) {
      reg_shift();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        register();
        break;
      default:
        jj_la1[259] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void numOrNumShift() throws ParseException {
    if (jj_2_63(2)) {
      num_shift();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        number();
        break;
      default:
        jj_la1[260] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void reg_shift() throws ParseException {
   ASTshiftLS jjtn001 = new ASTshiftLS(JJTSHIFTLS);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      register();
      jj_consume_token(34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSL:
        lsl();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          number();
          break;
        case REGISTER:
          register();
          break;
        default:
          jj_la1[261] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case LSR:
        lsr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          number();
          break;
        case REGISTER:
          register();
          break;
        default:
          jj_la1[262] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[263] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  3);
   }
    }
  }

  static final public void num_shift() throws ParseException {
   ASTshiftF jjtn001 = new ASTshiftF(JJTSHIFTF);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      number();
      shift();
      num();
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  3);
   }
    }
  }

/*Cond, scond, lsl, lsr, registres, number, hexa*/
  static final public void bCond() throws ParseException {
 /*@bgen(jjtree) bCond */
 ASTbCond jjtn000 = new ASTbCond(JJTBCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(B);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void hCond() throws ParseException {
 /*@bgen(jjtree) hCond */
 ASThCond jjtn000 = new ASThCond(JJTHCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(H);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void cond() throws ParseException {
 /*@bgen(jjtree) cond */
 ASTcond jjtn000 = new ASTcond(JJTCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(COND);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void scnd() throws ParseException {
 /*@bgen(jjtree) scnd */
 ASTscnd jjtn000 = new ASTscnd(JJTSCND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SCND);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.value = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lsl() throws ParseException {
 /*@bgen(jjtree) lsl */
 ASTlsl jjtn000 = new ASTlsl(JJTLSL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LSL);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.value = t.image.toString();
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void lsr() throws ParseException {
 /*@bgen(jjtree) lsr */
 ASTlsr jjtn000 = new ASTlsr(JJTLSR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LSR);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.value = t.image.toString();
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void shift() throws ParseException {
 /*@bgen(jjtree) shift */
 ASTshift jjtn000 = new ASTshift(JJTSHIFT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SHIFT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.value = t.image.toString();
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void register() throws ParseException {
 /*@bgen(jjtree) register */
 ASTregister jjtn000 = new ASTregister(JJTREGISTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REGISTER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.data.put("reg", t.image.toString());
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void number() throws ParseException {
 /*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.data.put("value", t.image.toString());
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void hexa() throws ParseException {
 /*@bgen(jjtree) hexa */
 ASThexa jjtn000 = new ASThexa(JJTHEXA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(HEXA);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.data.put("hexa", t.image.toString());
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void num() throws ParseException {
 /*@bgen(jjtree) num */
 ASTnum jjtn000 = new ASTnum(JJTNUM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.data.put("num", t.image.toString());
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(SHIFT)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(LSR)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(LSL)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_101()) return true;
    if (jj_3R_102()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_100()) return true;
    if (jj_scan_token(34)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  static private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  static private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  static private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_2()) {
    jj_scanpos = xsp;
    if (jj_3R_3()) return true;
    }
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyTestTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[264];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ffff000,0x3ffff000,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000080,0xc0000000,0xc0000000,0x80000080,0xc0000000,0xc0000000,0x80000080,0xc0000000,0xc0000000,0x80000080,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0xc0000000,0x80000100,0xc0000000,0xc0000000,0x80000100,0x80000180,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0x80000060,0x80000160,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0xc0000000,0x80000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0x80000060,0x80000160,0x0,0x80000000,0x40000000,0xc0000000,0xc0000000,0x600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x20,0x24,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[63];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyTest(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyTest(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyTestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 264; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 264; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyTest(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyTestTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 264; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 264; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyTest(MyTestTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 264; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyTestTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 264; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 264; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 63; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
